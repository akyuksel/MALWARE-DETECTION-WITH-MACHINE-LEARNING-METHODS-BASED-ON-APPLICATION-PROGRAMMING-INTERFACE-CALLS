# -*- coding: UTF-8 -*-

import tensorflow as tf
from numpy import loadtxt
from keras.models import Sequential
from keras.layers import Dense
from keras import optimizers


inputDataset = loadtxt('girdi_100', delimiter=',')
outputDataset = loadtxt('cikti_100', delimiter=',')

X=inputDataset
Y=outputDataset


def create_model():
  model = tf.keras.models.Sequential()
  model.add(tf.keras.layers.Dense(70, input_shape=(100,) , activation = 'relu'))
  model.add(tf.keras.layers.Dense(50, activation = 'relu'))
  model.add(tf.keras.layers.Dense(30, activation = 'relu'))
  model.add(tf.keras.layers.Dense(20, activation = 'relu'))
  model.add(tf.keras.layers.Dense(1, activation = 'sigmoid'))
  sgd=optimizers.SGD(lr=0.001, nesterov=True)
  model.compile(loss='binary_crossentropy', optimizer = 'adam' , metrics = ['accuracy'] )
  return model

from sklearn.model_selection import KFold
 
n_split=12
iter=0
#score[][]
totalAccuracy=0

KFold(n_split, random_state=None, shuffle=True)

for train_index,test_index in KFold(n_split).split(X):
  iter+=1
  x_train,x_test=X[train_index],X[test_index]
  y_train,y_test=Y[train_index],Y[test_index]
  
  model=create_model()
  model.fit(x_train, y_train,epochs=20, batch_size=50)
  
  score = model.evaluate(x_test, y_test, verbose=0)
  print('Test loss:', score[0])
  print('Test accuracy:', score[1])
  totalAccuracy+=score[1]


###################################################
"""
from keras.wrappers.scikit_learn import KerasClassifier, KerasRegressor
import eli5
from eli5.sklearn import PermutationImportance
#my_model = KerasRegressor(build_fn=base_model, **sk_params)    
#my_model.fit(X,y)

perm=PermutationImportance( model,scoring="accuracy",random_state=1).fit

#perm = PermutationImportance(model, random_state=1).fit(X,Y)
eli5.show_weights(perm, feature_names = X.columns.tolist())
"""

###################################################



#['AddAtomW','closesocket','CloseWindow','CreateDCA','CreateWaitableTimerA','CreateWaitableTimerW'','DeleteAtom','EnableWindow'','EnumDisplaySettingsA','FindAtomW','FlushFileBuffers','GetCaretPos','GetCursor','GetDIBits','GetEnvironmentStrings','GetInputState','GetKeyState','GetLastActivePopup','GetMenu','GetPixel','GetQueuedCompletionStatus','GetTextCharset','HeapLock','HeapUnlock','ImpersonateDdeClientWindow','InSendMessage','IsBadStringPtrA','IsCharLowerA','IsMenu','IsWindowUnicode','LoadAccelerators','LoadBitmapA','LocalLock','LocalUnlock','MoveFileExA','OleFlushClipboard','PostQueuedCompletionStatus','PulseEvent','SetActiveWindow','SetFocus','StretchBlt','TerminateThread','TranslateAcceleratorW','UpdateWindow','LoadLibraryExW','LocalAlloc','GetProcAddress','GetModuleHandleW','CreateFileW','GetSystemMetrics','MapViewOfFileEx','CloseHandle','LocalFree','GetThreadLocale','GetModuleFileNameW','LoadLibraryW','lstrlenW','FreeLibrary','lstrlenA','GetCurrentThreadId','GetOutlineTextMetricsA','GetTextFaceA','SendDlgItemMessageA','SetScrollRange'])

#_, accuracy = model.evaluate(X, Y)


#for train_index,test_index in KFold(n_split).split(X):
#  print('Accuracy[%d] = %.2f' % (test_index, model.evaluate(x_test,y_test)[1]*100))
#  totalAccuracy+=model.evaluate(x_test,y_test)[1]

print('TOTAL BENİM HESAPLADIĞIM ACCURACY = %.2f' % (totalAccuracy*100/iter))
#print('TOTAL KOMUTTAN GELEN ACCURACY = %.2f' % (accuracy*100))
